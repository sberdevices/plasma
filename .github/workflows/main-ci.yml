name: Main CI

on:
  push:
    branches:
      - rc
      - master
  pull_request:
    branches:
      - rc
      - master

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_REGISTRY_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - uses: actions/checkout@v2

      - name: Prepare repository
        run: git fetch --unshallow --tags

      - name: Unset header
        # https://github.com/intuit/auto/issues/1030
        run: git config --local --unset http.https://github.com/.extraheader

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Setup packages
        run: |
          npm i
          npx lerna bootstrap

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm run test

      - name: Release Info
        run: npm whoami && npx auto info || echo 'auto info returned 1'

      - name: Create Release
        run: npm run release

      - name: Update package-lock's
        if: github.event_name != 'pull_request'
        run: |
          npm i --package-lock-only
          lerna clean -y
          lerna exec --ignore @sberdevices/plasma-ui-docs --ignore @sberdevices/plasma-web-docs -- npm i --package-lock-only
          # root deps don't update correctly on first regeneration O_o
          npm i --package-lock-only

      - name: Extract branch name
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Commit & Push package-lock's
        if: github.event_name != 'pull_request'
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          message: 'chore: update package-locks [skip ci]'
          branch: ${{ steps.extract_branch.outputs.branch }}
          author_name: SberDevices Frontend Team
          author_email: sberdevices.frontend@gmail.com
      
      # Кеширование всей файловой структуры
      - name: Cache build packages
        uses: actions/cache@v2
        id: cache-build
        with:
          path: ./*
          key: ${{ github.sha }}

# Данная джоба идёт после релиза, т.к. необходимо учесть обновлённые версии пакетов
  build-documentation:
    needs: release
    if: always()
    name: Build Documentation
    runs-on: ubuntu-latest
    env:
      NPM_REGISTRY_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
      ARTIFACT_NAME: ${{ github.event_name != 'pull_request' && 'next' ||  format('pr-{0}', github.event.number) }}
      ICONS_PUBLIC_URL: /icons
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      # Восстановление кеша, который собрался в джобе Release
      - name: Restore build packages from cache
        uses: actions/cache@v2
        id: cache-build
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Prepare directory
        run: mkdir ../build

      - name: Plasma Website
        run: |
          npm run build --prefix="./website/plasma-website"
          cp -R ./website/plasma-website/build ../build/${ARTIFACT_NAME}

      - name: Plasma UI Docs
        run: |
          npm run build --prefix="./website/plasma-ui-docs"
          cp -R ./website/plasma-ui-docs/build ../build/${ARTIFACT_NAME}/ui

      - name: Plasma Web Docs
        run: |
          npm run build --prefix="./website/plasma-web-docs"
          cp -R ./website/plasma-web-docs/build ../build/${ARTIFACT_NAME}/web

      - name: Plasma Temple Docs
        run: |
          npm run build --prefix="./website/plasma-temple-docs"
          cp -R ./website/plasma-temple-docs/build ../build/${ARTIFACT_NAME}/temple

      - name: Plasma UI Storybook
        run: |
          npm run storybook:build --prefix="./packages/plasma-ui"
          cp -R ./packages/plasma-ui/build-sb ../build/${ARTIFACT_NAME}/ui-storybook

      - name: Plasma Web Storybook
        run: |
          npm run storybook:build --prefix="./packages/plasma-web"
          cp -R ./packages/plasma-web/build-sb ../build/${ARTIFACT_NAME}/web-storybook

      - name: Plasma B2C Storybook
        run: |
          npm run storybook:build --prefix="./packages/plasma-b2c"
          cp -R ./packages/plasma-b2c/build-sb ../build/${ARTIFACT_NAME}/b2c-storybook

      - name: Plasma Temple Storybook
        run: |
          npm run storybook:build --prefix="./packages/plasma-temple"
          cp -R ./packages/plasma-temple/build-sb ../build/${ARTIFACT_NAME}/temple-storybook

      # Данный шаг идёт перед загрузкой текущей версии билдов,
      # поскольку нет необходимости ожидать публикацию документации
      - name: Clean old PR builds
        if: github.event_name == 'pull_request'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DOCS_HOST }}
          username: ${{ secrets.DOCS_LOGIN }}
          key: ${{ secrets.DOCS_KEY }}
          envs: ARTIFACT_NAME
          script: |
            cd ../../var/www/plasma
            rm -rf $ARTIFACT_NAME/

      # Данный шаг размещён здесь т.к. в зависимости от вида действия 
      # (pull_request или push), его необходимо выполнить до или после удаления билдов
      - name: Upload PR or master builds
        uses: garygrossgarten/github-action-scp@release
        with:
          host: ${{ secrets.DOCS_HOST }}
          username: ${{ secrets.DOCS_LOGIN }}
          privateKey: ${{ secrets.DOCS_KEY }}
          local: "../build"
          remote: "/var/www/plasma"

      # Данный шаг идёт только после загрузки текущей версии билдов
      # т.к. необходимо, чтобы документация на проде оставалась доступной,
      # пока происходит публикация
      - name: Clean and update master builds
        if: github.event_name != 'pull_request'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DOCS_HOST }}
          username: ${{ secrets.DOCS_LOGIN }}
          key: ${{ secrets.DOCS_KEY }}
          script: |
            cd ../../var/www/plasma
            rm -rf current/
            mv next current

      - name: Post success comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Documentation preview deployed!
              
              website: http://plasma.sberdevices.ru/pr-${context.issue.number}/
              ui storybook: http://plasma.sberdevices.ru/pr-${context.issue.number}/ui-storybook/
              web storybook: http://plasma.sberdevices.ru/pr-${context.issue.number}/web-storybook/
              b2c storybook: http://plasma.sberdevices.ru/pr-${context.issue.number}/b2c-storybook/
              temple storybook: http://plasma.sberdevices.ru/pr-${context.issue.number}/temple-storybook/
              `
            })
